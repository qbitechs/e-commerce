
upstream kamal_proxy {
    # Replace 'kamal-proxy' with the actual Docker network alias or hostname of your Kamal-proxy container.
    server kamal-proxy:80;
}

# Server block for handling ACME challenges over HTTP and redirecting to HTTPS
server {
    listen 80 default_server;
    listen [::]:80 default_server;
    server_name _;
    location /.well-known/acme-challenge/ {
        # The path inside the container where challenges are stored
        alias /etc/letsencrypt/challenges/;
        access_log off;
    }
    location / {
        return 301 https://$host$request_uri;
    }
}

# Main server block for handling all HTTPS traffic
server {
    listen 443 ssl http2 default_server;
    listen [::]:443 ssl http2 default_server;
    server_name _;
    # These are fallback certificates for your main domain.
    ssl_certificate /etc/letsencrypt/live/fabricfusionbyash.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/fabricfusionbyash.com/privkey.pem;

    ssl_certificate_by_lua_block {
        local ssl = require "ngx.ssl"
        local ssl_server_name = ngx.var.ssl_server_name
        if not ssl_server_name then
            ngx.log(ngx.ERR, "ssl_server_name is nil")
            return ngx.exit(ngx.ERROR)
        end

        local function read_file(path)
            local file = io.open(path, "rb")
            if not file then return nil end
            local content = file:read("*a")
            file:close()
            return content
        end

        local cert_path = "/etc/letsencrypt/live/" .. ssl_server_name .. "/fullchain.pem"
        local key_path = "/etc/letsencrypt/live/" .. ssl_server_name .. "/privkey.pem"

        local cert = read_file(cert_path)
        local key = read_file(key_path)

        if cert and key then
            local ok, err = ssl.clear_certs()
            if not ok then
                ngx.log(ngx.ERR, "failed to clear certs: ", err)
                return
            end
            local ok, err = ssl.set_cert(cert)
            if not ok then
                ngx.log(ngx.ERR, "failed to set cert: ", err)
                return
            end
            local ok, err = ssl.set_priv_key(key)
            if not ok then
                ngx.log(ngx.ERR, "failed to set priv key: ", err)
                return
            end
            ngx.log(ngx.INFO, "Loaded custom certificate for " .. ssl_server_name)
        else
            ngx.log(ngx.INFO, "No custom certificate for " .. ssl_server_name .. ", using default.")
        end
    }

    location / {
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_set_header X-Request-Start "t=${msec}";
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_redirect off;
        proxy_pass http://kamal_proxy;
        proxy_http_version 1.1;
        proxy_read_timeout 3600;
        proxy_send_timeout 3600;
    }
}
