# Name of your application. Used to uniquely configure containers.
service: e_commerce

# Name of the container image.
image: qbitechs/e-commerece

# Deploy to these servers.
servers:
  web:
    - 46.62.153.93

# Enable SSL auto certification via Let's Encrypt and allow for multiple apps on a single web server.
# Remove this section when using multiple web servers and ensure you terminate SSL at your load balancer.
#
# Note: If using Cloudflare, set encryption mode in SSL/TLS setting to "Full" to enable CF-to-app encryption.
proxy:
  ssl: false
  app_port: 3000
  ssl_redirect: false

  # host: fabricfusionbyash.com

# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  server: registry.digitalocean.com
  username: _json_key

  # Always use an access token rather than real password (pulled from .kamal/secrets).
  password:
    - KAMAL_REGISTRY_PASSWORD

# Inject ENV variables into containers (secrets come from .kamal/secrets).
env:
  secret:
    - RAILS_MASTER_KEY
    - POSTGRES_USER
    - POSTGRES_PASSWORD
  clear:
    # Run the Solid Queue Supervisor inside the web server's Puma process to do jobs.
    # When you start using multiple servers, you should split out job processing to a dedicated machine.
    SOLID_QUEUE_IN_PUMA: true
    DB_HOST: db

# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal logs -r job" will tail logs from the first server in the job section.
aliases:
  console: app exec --interactive --reuse "bin/rails console"
  shell: app exec --interactive --reuse "bash"
  logs: app logs -f
  dbc: app exec --interactive --reuse "bin/rails dbconsole"


# Use a persistent storage volume for sqlite database files and local Active Storage files.
# Recommended to change this to a mounted volume path that is backed up off server.
volumes:
  - "e_commerce_storage:/rails/storage"
  # create /var/letsencrypt manually on the server and set the permissions so that
  # non-root user can write/read the directory
  # sudo mkdir -p /var/letsencrypt
  # sudo chown 1000:1000 /var/letsencrypt
  # sudo chmod 755 /var/letsencrypt
  - /var/letsencrypt:/etc/letsencrypt

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
asset_path: /rails/public/assets

# Configure the image builder.
builder:
  arch: amd64

# Use accessory services (secrets come from .kamal/secrets).
accessories:
  postgres:
    service: db
    image: postgres:15
    roles:
      - web
    port: 5432:5432
    env:
      secret:
        - POSTGRES_USER
        - POSTGRES_PASSWORD
    directories:
      - data:/var/lib/postgresql/data

  nginx:
    service: nginx
    image: openresty/openresty:1.21.4.1-alpine-fat
    roles:
      - web
    options:
      publish:
        - "80:80"
        - "443:443"
    files:
      - ./config/nginx.conf:/etc/nginx/conf.d/nginx.conf
    volumes:
      - /var/letsencrypt:/etc/letsencrypt
